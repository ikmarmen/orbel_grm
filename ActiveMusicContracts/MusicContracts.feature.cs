// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ActiveMusicContracts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("MusicContracts", Description="\tIn order to get available music contracts\r\n\tAs a user\r\n\tI want to get active con" +
        "tracts", SourceFile="MusicContracts.feature", SourceLine=0)]
    public partial class MusicContractsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MusicContracts.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MusicContracts", "\tIn order to get available music contracts\r\n\tAs a user\r\n\tI want to get active con" +
                    "tracts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search for active music contracts", new string[] {
                "copyDataFiles"}, SourceLine=6)]
        public virtual void SearchForActiveMusicContracts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts", new string[] {
                        "copyDataFiles"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the supplied reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("user perform search by ITunes 03-01-2012", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table1.AddRow(new string[] {
                        "Monkey Claw",
                        "Black Mountain",
                        "digital download",
                        "02-01-2012",
                        ""});
            table1.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "digital download",
                        "03-01-2011",
                        ""});
            table1.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "digital download",
                        "02-01-2012",
                        ""});
            table1.AddRow(new string[] {
                        "Tinie Tempah",
                        "Miami 2 Ibiza",
                        "streaming",
                        "02-01-2012",
                        ""});
#line 10
 testRunner.Then("the output should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search for active music contracts_2", new string[] {
                "copyDataFiles"}, SourceLine=17)]
        public virtual void SearchForActiveMusicContracts_2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts_2", new string[] {
                        "copyDataFiles"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("the supplied reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("user perform search by YouTube 12-27-2012", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Christmas Special",
                        "streaming",
                        "12-25-2012",
                        "12-31-2012"});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Iron Horse",
                        "streaming",
                        "06-01-2012",
                        ""});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "streaming",
                        "03-01-2011",
                        ""});
            table2.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "streaming",
                        "02-01-2012",
                        ""});
#line 21
 testRunner.Then("the output should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search for active music contracts_3", new string[] {
                "copyDataFiles"}, SourceLine=28)]
        public virtual void SearchForActiveMusicContracts_3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts_3", new string[] {
                        "copyDataFiles"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("the supplied reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("user perform search by YouTube 04-01-2012", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table3.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "streaming",
                        "03-01-2011",
                        ""});
            table3.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "streaming",
                        "02-01-2012",
                        ""});
#line 32
 testRunner.Then("the output should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
